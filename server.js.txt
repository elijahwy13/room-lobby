import express from 'express';
}


app.post('/api/rooms', (req, res) => {
let code = genCode();
while (rooms.has(code)) code = genCode();
rooms.set(code, { players: new Map(), hostId: null });
res.json({ code });
});


function broadcastRoom(code) {
const room = rooms.get(code);
if (!room) return;
const players = Array.from(room.players.values()).map(p => ({
id: p.id,
name: p.name,
isHost: p.id === room.hostId,
}));
io.to(code).emit('room:update', { code, players });
}


io.on('connection', (socket) => {
// Join a room
socket.on('room:join', ({ code, name, host = false }, ack) => {
code = (code || '').toUpperCase();
const room = rooms.get(code);
if (!room) return ack?.({ ok: false, error: 'Room not found' });
if (!name || name.trim().length === 0) return ack?.({ ok: false, error: 'Name required' });


socket.join(code);
socket.data.code = code;
socket.data.name = name.trim();


const player = { id: socket.id, name: socket.data.name };
room.players.set(socket.id, player);
if (!room.hostId || host) room.hostId = socket.id;


broadcastRoom(code);
return ack?.({ ok: true, code, you: { id: socket.id, name: player.name, isHost: socket.id === room.hostId } });
});


// Host starts game
socket.on('room:start', () => {
const code = socket.data.code;
const room = rooms.get(code);
if (!room) return;
if (room.hostId !== socket.id) return; // only host
io.to(code).emit('room:started');
});


socket.on('disconnect', () => {
const code = socket.data.code;
if (!code) return;
const room = rooms.get(code);
if (!room) return;


room.players.delete(socket.id);


// If host left, reassign host or delete empty room
if (room.hostId === socket.id) {
const next = room.players.keys().next();
room.hostId = next.done ? null : next.value;
}
if (room.players.size === 0) {
rooms.delete(code);
} else {
broadcastRoom(code);
}
});
});


const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Lobby server running on http://localhost:${PORT}`));